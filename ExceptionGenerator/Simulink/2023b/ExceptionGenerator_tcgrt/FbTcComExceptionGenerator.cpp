
// ****************** FbTcComExceptionGenerator.cpp *************************
// Generated by TE140x-TargetForMatlabSimulink  2.8.1.0
// MATLAB 23.2.0.2409890 (R2023b) Update 3 (win64)
// TwinCAT 3.1.0.0
// TwinCAT Target 2.8.1.0
// Beckhoff Automation GmbH & Co. KG     (www.beckhoff.com)
// *************************************************************

#include "TcPch.h"
#pragma hdrstop

#include "FbTcComExceptionGenerator.h"


#include "ObjClassFactory.h"
using namespace TcMgSdk;

///////////////////////////////////////////////////////////////////////////////
// Definitions
///////////////////////////////////////////////////////////////////////////////
#if TC_BUILD<=4024
DEFINE_THIS_FILE()
#endif

CFbTcComExceptionGenerator::CFbTcComExceptionGenerator()
{

}

CFbTcComExceptionGenerator::~CFbTcComExceptionGenerator()
{

}

bool CFbTcComExceptionGenerator::FB_init(bool bInitRetains, bool bInCopyCode, ST_FB_ExceptionGenerator_TcCOM_InitStruct& stInit)
{

	HRESULT hr = S_OK;
	// Map Parameter
	memcpy(&(this->stInit),&stInit,sizeof(this->stInit));

	hr = __super::Init(0,TC_BUILD_MIN,bInitRetains,bInCopyCode);
	if (FAILED(hr))
		Log(TcTraceLevel::tlError, "Initialization of base class TcMatSim::GeneratedFbTcComWrapper failed");
		
	ITComObjectServerPtr psrv;
	TCOM_STATE eObjState = TCOM_STATE_INVALID;
	if (SUCCEEDED(hr))
		hr = GetObjectServer(&psrv);
	if(SUCCEEDED(hr))
	{
			if(stInit.nOid == OTCID_CreateNewId ||
			stInit.nOid == OTCID_FirstFreeId ||
			stInit.nOid == OTCID_LastFreeId)
		{
			hr = psrv->TcCreateInstance(GetVersionedCLSID(CID_EXCEPTIONGENERATOR,VID_ExceptionGenerator),IID_ITComObject,(PPVOID)&m_ipObj);
			if (FAILED(hr))
				Log(TcTraceLevel::tlError, "Could not create instance. hr = %X08",hr);
			
			if (SUCCEEDED(hr))
			{
				hr = m_ipObj->TcSetObjectId(stInit.nOid);
				if (FAILED(hr))
					Log(TcTraceLevel::tlError, "Could not set object ID. hr = %X08",hr);
			}
			if (SUCCEEDED(hr))
			{
				hr = strcmp(stInit.sObjName,"") == 0 ?  m_ipObj->TcSetObjectName(m_InstancePath) : m_ipObj->TcSetObjectName(stInit.sObjName);
				if (FAILED(hr))
					Log(TcTraceLevel::tlError, "Could not set object name. hr = %X08",hr);
			}
			
			if (SUCCEEDED(hr))
			{
				hr = m_ipObj->TcGetObjState(&eObjState);
				if (FAILED(hr))
					Log(TcTraceLevel::tlError, "Could not get object state. hr = %X08",hr);
				
				if (SUCCEEDED(hr) && (eObjState < TCOM_STATE_PREOP) && (TCOM_STATE_PREOP <= stInit.eObjState))
				{
					hr = m_ipObj->TcSetObjState(TCOM_STATE_PREOP, psrv, NULL);
					if (FAILED(hr))
					{
						Log(TcTraceLevel::tlError, "TcSetObjState to PreOp failed. hr = %X08",hr);
					}
					else
					{
						eObjState = TCOM_STATE_PREOP;
					}
				}
				if (stInit.eObjState > TCOM_STATE_PREOP)
				{
					if (SUCCEEDED(hr))
						hr = SetnTaskOid(stInit.nTaskOid);
					if (SUCCEEDED(hr))
						hr = SetnTaskSortOrder(stInit.nTaskSortOrder);
					if (SUCCEEDED(hr))
						hr = SeteTraceLevelMax(stInit.eTraceLevelMax);
					if (SUCCEEDED(hr))
						hr = SeteModuleCaller(stInit.eModuleCaller);
					if (SUCCEEDED(hr))
						hr = SeteCallerVerification(stInit.eCallerVerification);
					if (SUCCEEDED(hr))
						hr = SeteStepSizeAdaptation(stInit.eStepSizeAdaptation);
					if (SUCCEEDED(hr))
						hr = SeteExecutionSequence(stInit.eExecutionSequence);
					if (SUCCEEDED(hr))
						hr = SetbExecute(stInit.bExecute);
					if (SUCCEEDED(hr))
						hr = SeteAccessLockState(stInit.eAccessLockState);
					if (SUCCEEDED(hr))
						hr = SeteInitExceptionHandling(stInit.eInitExceptionHandling);
					if (SUCCEEDED(hr))
						hr = SeteUpdateExceptionHandling(stInit.eUpdateExceptionHandling);

				}
			}
		}
		else
		{
			/*** Query object interface ***/
			hr = psrv->TcQueryObjectInterface(stInit.nOid,IID_ITComObject,(PPVOID)&m_ipObj);
			if (FAILED(hr))
				Log(TcTraceLevel::tlError, "Could not query object interface \"ITComObject\". hr = %X08",hr);
			
			if (SUCCEEDED(hr))
				hr = GetObjState(eObjState);
			if (SUCCEEDED(hr) && (eObjState < TCOM_STATE_PREOP) && (TCOM_STATE_PREOP <= stInit.eObjState))
				hr = SetObjState(TCOM_STATE_PREOP);

		}
		/*** Query Interface ITcCyclic ***/
		if (SUCCEEDED(hr))
		{
			m_ipObj->TcQueryInterface(IID_ITcCyclic,(PPVOID)&m_ipCyclic);
			if (FAILED(hr))
				Log(TcTraceLevel::tlError, "Could not query object interface \"ITcCyclic\": hr = %08X",hr);
		}
		/*** Query Interface ITcPostCyclic ***/
		if (SUCCEEDED(hr))
		{
			m_ipObj->TcQueryInterface(IID_ITcPostCyclic,(PPVOID)&m_ipPostCyclic);
			if (FAILED(hr))
				Log(TcTraceLevel::tlError, "Could not query object interface \"ITcPostCyclic\": hr = %08X",hr);
		}
		/*** Query Interface ITcADI ***/
		if (SUCCEEDED(hr))
		{
			m_ipObj->TcQueryInterface(IID_ITcADI,(PPVOID)&m_ipADI);
			if (FAILED(hr))
				Log(TcTraceLevel::tlError, "Could not query object interface \"ITcADI\": hr = %08X",hr);
		}
		/*** Query Interface ITcExceptionGenerator ***/
		if (SUCCEEDED(hr))
		{
			m_ipObj->TcQueryInterface(IID_ITcExceptionGenerator,(PPVOID)&_ipExceptionGenerator);
			if (FAILED(hr))
				Log(TcTraceLevel::tlError, "Could not query object interface \"ITcExceptionGenerator\": hr = %08X",hr);
		}

	}
	if(SUCCEEDED(hr))
		hr = SetObjState(stInit.eObjState);

	m_HResult = hr;
	return SUCCEEDED(hr);
}

void CFbTcComExceptionGenerator::_FB_init(ST_FB_ExceptionGenerator_TcCOM_InitStruct_FB_init* ST_Param)
{
	ST_Param->result = ((CFbTcComExceptionGenerator*)ST_Param->pInst)->FB_init( ST_Param->bInitRetains, ST_Param->bInCopyCode, ST_Param->stInit );
}

bool CFbTcComExceptionGenerator::FB_afterinit()
{

	HRESULT hr = S_OK;

	m_HResult = hr;
	return SUCCEEDED(hr);
}

void CFbTcComExceptionGenerator::_FB_AfterInit(ST_FB_ExceptionGenerator_TcCOM_InitStruct_FB_afterinit* ST_Param)
{
	ST_Param->result = ((CFbTcComExceptionGenerator*)ST_Param->pInst)->FB_afterinit(  );
}

bool CFbTcComExceptionGenerator::Reinit(ST_FB_ExceptionGenerator_TcCOM_InitStruct stReInit)
{

	HRESULT hr = S_OK;
	memcpy(&stInit,&stReInit,sizeof(stInit));
	if (SUCCEEDED(hr))
		hr = SetObjState(TCOM_STATE_PREOP);
					if (SUCCEEDED(hr))
						hr = SetnTaskOid(stInit.nTaskOid);
					if (SUCCEEDED(hr))
						hr = SetnTaskSortOrder(stInit.nTaskSortOrder);
					if (SUCCEEDED(hr))
						hr = SeteTraceLevelMax(stInit.eTraceLevelMax);
					if (SUCCEEDED(hr))
						hr = SeteModuleCaller(stInit.eModuleCaller);
					if (SUCCEEDED(hr))
						hr = SeteCallerVerification(stInit.eCallerVerification);
					if (SUCCEEDED(hr))
						hr = SeteStepSizeAdaptation(stInit.eStepSizeAdaptation);
					if (SUCCEEDED(hr))
						hr = SeteExecutionSequence(stInit.eExecutionSequence);
					if (SUCCEEDED(hr))
						hr = SetbExecute(stInit.bExecute);
					if (SUCCEEDED(hr))
						hr = SeteAccessLockState(stInit.eAccessLockState);
					if (SUCCEEDED(hr))
						hr = SeteInitExceptionHandling(stInit.eInitExceptionHandling);
					if (SUCCEEDED(hr))
						hr = SeteUpdateExceptionHandling(stInit.eUpdateExceptionHandling);

	if (SUCCEEDED(hr))
		hr = SetObjState(stInit.eObjState);
	m_HResult = hr;
return SUCCEEDED(hr);
}

void CFbTcComExceptionGenerator::_Reinit(ST_FB_ExceptionGenerator_TcCOM_InitStruct_Reinit* ST_Param)
{
	ST_Param->result = ((CFbTcComExceptionGenerator*)ST_Param->pInst)->Reinit( ST_Param->stReInit );
}

bool CFbTcComExceptionGenerator::FB_Main()
{

	HRESULT hr = S_OK;
	TCOM_STATE state;
	if (SUCCEEDED(hr))
		hr = GetObjState(state);
	if (SUCCEEDED(hr) && state != TCOM_STATE_OP)
		hr = LogOnce(ADS_E_INVALIDSTATE, TcTraceLevel::tlError, "TcCOM object is not in OP mode");
	CLSID clsid;
	if (SUCCEEDED(hr))
	{
		hr = m_ipObj->GetClassId(clsid);
		if (FAILED(hr))
			LogOnce(hr, TcTraceLevel::tlError, "Unable to determine CLSID");
	}
	if (SUCCEEDED(hr))
	{
		const CLSID expectedClsid = GetVersionedCLSID(CID_EXCEPTIONGENERATOR,VID_ExceptionGenerator);
		if (memcmp(&clsid, &expectedClsid, sizeof(CLSID) != 0))
			hr = LogOnce(ADS_E_INVALIDCLSID,TcTraceLevel::tlError, "CLSID does not match");
	}


ModuleCaller eCaller;
if (SUCCEEDED(hr))
{
	PVOID pCaller = &eCaller;
	ULONG nCaller = sizeof(eCaller);
	hr = m_ipObj->TcGetObjPara(0x00000002,nCaller,pCaller);
	if (FAILED(hr)) 
		LogOnce(hr,TcTraceLevel::tlError, "TcGetObjPara of eModuleCaller (TcMgSdk.ModuleCaller) with PID 0x00000002 failed: hr = 0x%08X",hr);
}
if (SUCCEEDED(hr))
{
	if (eCaller == ModuleCaller::Module)
	{
		ITcRTimeTaskPtr ipTask;
		if (SUCCEEDED(hr))
			hr = GetCurrentTask(&ipTask);
		if (SUCCEEDED(hr) && m_ipPreInputCyclic)
			hr = m_ipPreInputCyclic->PreInputUpdate(ipTask,0,0);
		if (SUCCEEDED(hr))
			hr = WriteInputData(stExceptionGenerator_U,0,"ExceptionGenerator_U");

		if (SUCCEEDED(hr) && m_ipCyclic)
			hr = m_ipCyclic->CycleUpdate(ipTask,0,0);
		if (SUCCEEDED(hr))
			hr = ReadOutputData(stExceptionGenerator_Y,1,"ExceptionGenerator_Y");
		if (SUCCEEDED(hr))
			hr = ReadOutputData(stExecutionInfo,3,"ExecutionInfo");

		if (SUCCEEDED(hr) && m_ipPostCyclic)
			hr = m_ipPostCyclic->PostCyclicUpdate(ipTask,0,0);
	}
	else
	{
		hr = LogOnce(ADS_E_INVALIDPARM,TcTraceLevel::tlError, "Parameter \"ModuleCaller\" must be set to \"Module\"");
	}
}

	m_HResult = hr;
	return SUCCEEDED(hr);
}

void CFbTcComExceptionGenerator::_FB_Main(ST_FB_ExceptionGenerator_TcCOM_InitStruct_FB_Main* ST_Param)
{
	ST_Param->result = ((CFbTcComExceptionGenerator*)ST_Param->pInst)->FB_Main(  );
}

bool CFbTcComExceptionGenerator::FB_exit(bool bInCopyCode)
{

	HRESULT hr = S_OK;

	/* Check if FB is owner */
	if(stInit.nOid == OTCID_CreateNewId ||
	   stInit.nOid == OTCID_FirstFreeId ||
	   stInit.nOid == OTCID_LastFreeId)
	{
		hr = SetObjState(TCOM_STATE_INIT);
	}
	/*** Release Interface ITComObject ***/
	if (m_ipObj != NULL)
	{
		m_ipObj->TcRelease();
		m_ipObj = NULL;
	}
	/*** Release Interface ITcADI ***/
	if (m_ipADI != NULL)
	{
		m_ipADI->TcRelease();
		m_ipADI = NULL;
	}
	/*** Release Interface ITcPreInputCyclic ***/
	if (m_ipPreInputCyclic != NULL)
	{
		m_ipPreInputCyclic->TcRelease();
		m_ipPreInputCyclic = NULL;
	}
	/*** Release Interface ITcCyclic ***/
	if (m_ipCyclic != NULL)
	{
		m_ipCyclic->TcRelease();
		m_ipCyclic = NULL;
	}
	/*** Release Interface ITcPostCyclic ***/
	if (m_ipPostCyclic != NULL)
	{
		m_ipPostCyclic->TcRelease();
		m_ipPostCyclic = NULL;
	}
	/*** Release Interface ITcExceptionGenerator ***/
	if (_ipExceptionGenerator != NULL)
	{
		_ipExceptionGenerator->TcRelease();
		_ipExceptionGenerator = NULL;
	}

	__super::Exit(bInCopyCode);

	m_HResult = hr;
	return SUCCEEDED(hr);
}

void CFbTcComExceptionGenerator::_FB_exit(ST_FB_ExceptionGenerator_TcCOM_InitStruct_FB_exit* ST_Param)
{
	ST_Param->result = ((CFbTcComExceptionGenerator*)ST_Param->pInst)->FB_exit( ST_Param->bInCopyCode );
}

void CFbTcComExceptionGenerator::_GeteObjectState(ST_GetSet_TCOM_STATE* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->GetObjState( ST_Param->eParam );
}

void CFbTcComExceptionGenerator::_SeteObjectState(ST_GetSet_TCOM_STATE* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->SetObjState( ST_Param->eParam );
}

HRESULT CFbTcComExceptionGenerator::GetnHResult(HRESULT& nParam)
{
	nParam = m_HResult;
	return S_OK;
}

void CFbTcComExceptionGenerator::_GetnHResult(ST_GetSet_HRESULT* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->GetnHResult( ST_Param->nParam );
}

HRESULT CFbTcComExceptionGenerator::GetipTcComObject(ITComObject** ipParam)
{
	if (ipParam==nullptr)
		return E_INVALIDARG;
	*ipParam = m_ipObj;
	return S_OK;
}

void CFbTcComExceptionGenerator::_GetipTcComObject(ST_GetSet_ITComObject* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->GetipTcComObject( &ST_Param->ipParam );
}

HRESULT CFbTcComExceptionGenerator::GetipADI(ITcADI** ipParam)
{
	if (ipParam==nullptr)
		return E_INVALIDARG;
	*ipParam = m_ipADI;
	return S_OK;
}

void CFbTcComExceptionGenerator::_GetipADI(ST_GetSet_ITcADI* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->GetipADI( &ST_Param->ipParam );
}

HRESULT CFbTcComExceptionGenerator::GetnTaskOid(OTCID& nParam)
{
	HRESULT hr =  m_ipObj ? S_OK : ADS_E_NOINTERFACE;
	PVOID pparam = &nParam;
	ULONG nparam = sizeof(nParam);
	if (SUCCEEDED(hr))
	{
		hr =  m_ipObj->TcGetObjPara(0x03002060,nparam,pparam);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcGetObjPara of nTaskOid (OTCID) with PID 0x03002060 failed: hr = 0x%08X",hr);
	}
	return hr;

}

void CFbTcComExceptionGenerator::_GetnTaskOid(ST_GetSet_OTCID* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->GetnTaskOid( ST_Param->nParam );
}

HRESULT CFbTcComExceptionGenerator::SetnTaskOid(OTCID nParam)
{
	HRESULT hr =  m_ipObj ? S_OK : ADS_E_NOINTERFACE;
	if (SUCCEEDED(hr))
	{
		hr = m_ipObj->TcSetObjPara(0x03002060,sizeof(nParam),&nParam);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcSetObjPara of nTaskOid (OTCID) with PID 0x03002060 failed: hr = 0x%08X",hr);
	}
	if (SUCCEEDED(hr))
	{
		ULONG taskPrio;
		hr = GetTaskPriority(nParam, taskPrio);
		if (SUCCEEDED(hr))
			hr = m_ipObj->TcSetObjPara(0x03002070,sizeof(taskPrio),&taskPrio);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcSetObjPara with PID 0x03002070 failed: hr = 0x%08X",hr);
	}
	if (SUCCEEDED(hr))
	{
		ULONG taskCycleTimeNs;
		hr = GetTaskCycletimeNs(nParam, taskCycleTimeNs);
		if (SUCCEEDED(hr))
			hr = m_ipObj->TcSetObjPara(0x03002080,sizeof(taskCycleTimeNs),&taskCycleTimeNs);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcSetObjPara with PID 0x03002080 failed: hr = 0x%08X",hr);
	}
	if (SUCCEEDED(hr))
	{
		USHORT taskPort;
		hr = GetTaskPort(nParam, taskPort);
		if (SUCCEEDED(hr))
			hr = m_ipObj->TcSetObjPara(0x03002090,sizeof(taskPort),&taskPort);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcSetObjPara with PID 0x03002090 failed: hr = 0x%08X",hr);
	}
	return hr;

}

void CFbTcComExceptionGenerator::_SetnTaskOid(ST_GetSet_OTCID* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->SetnTaskOid( ST_Param->nParam );
}

HRESULT CFbTcComExceptionGenerator::GetnTaskPriority(ULONG& nParam)
{
	HRESULT hr =  m_ipObj ? S_OK : ADS_E_NOINTERFACE;
	PVOID pparam = &nParam;
	ULONG nparam = sizeof(nParam);
	if (SUCCEEDED(hr))
	{
		hr =  m_ipObj->TcGetObjPara(0x03002070,nparam,pparam);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcGetObjPara of nTaskPriority (ULONG) with PID 0x03002070 failed: hr = 0x%08X",hr);
	}
	return hr;

}

void CFbTcComExceptionGenerator::_GetnTaskPriority(ST_GetSet_UDINT* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->GetnTaskPriority( ST_Param->nParam );
}

HRESULT CFbTcComExceptionGenerator::GetnTaskCycleTimeNs(ULONG& nParam)
{
	HRESULT hr =  m_ipObj ? S_OK : ADS_E_NOINTERFACE;
	PVOID pparam = &nParam;
	ULONG nparam = sizeof(nParam);
	if (SUCCEEDED(hr))
	{
		hr =  m_ipObj->TcGetObjPara(0x03002080,nparam,pparam);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcGetObjPara of nTaskCycleTimeNs (ULONG) with PID 0x03002080 failed: hr = 0x%08X",hr);
	}
	return hr;

}

void CFbTcComExceptionGenerator::_GetnTaskCycleTimeNs(ST_GetSet_UDINT* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->GetnTaskCycleTimeNs( ST_Param->nParam );
}

HRESULT CFbTcComExceptionGenerator::GetnTaskPort(USHORT& nParam)
{
	HRESULT hr =  m_ipObj ? S_OK : ADS_E_NOINTERFACE;
	PVOID pparam = &nParam;
	ULONG nparam = sizeof(nParam);
	if (SUCCEEDED(hr))
	{
		hr =  m_ipObj->TcGetObjPara(0x03002090,nparam,pparam);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcGetObjPara of nTaskPort (USHORT) with PID 0x03002090 failed: hr = 0x%08X",hr);
	}
	return hr;

}

void CFbTcComExceptionGenerator::_GetnTaskPort(ST_GetSet_UINT* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->GetnTaskPort( ST_Param->nParam );
}

HRESULT CFbTcComExceptionGenerator::GetnTaskSortOrder(ULONG& nParam)
{
	HRESULT hr =  m_ipObj ? S_OK : ADS_E_NOINTERFACE;
	PVOID pparam = &nParam;
	ULONG nparam = sizeof(nParam);
	if (SUCCEEDED(hr))
	{
		hr =  m_ipObj->TcGetObjPara(0x030020B0,nparam,pparam);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcGetObjPara of nTaskSortOrder (ULONG) with PID 0x030020B0 failed: hr = 0x%08X",hr);
	}
	return hr;

}

void CFbTcComExceptionGenerator::_GetnTaskSortOrder(ST_GetSet_UDINT* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->GetnTaskSortOrder( ST_Param->nParam );
}

HRESULT CFbTcComExceptionGenerator::SetnTaskSortOrder(ULONG nParam)
{
	HRESULT hr =  m_ipObj ? S_OK : ADS_E_NOINTERFACE;
	if (SUCCEEDED(hr))
	{
		hr = m_ipObj->TcSetObjPara(0x030020B0,sizeof(nParam),&nParam);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcSetObjPara of nTaskSortOrder (ULONG) with PID 0x030020B0 failed: hr = 0x%08X",hr);
	}
	return hr;

}

void CFbTcComExceptionGenerator::_SetnTaskSortOrder(ST_GetSet_UDINT* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->SetnTaskSortOrder( ST_Param->nParam );
}

HRESULT CFbTcComExceptionGenerator::GeteTraceLevelMax(TcTraceLevel& eParam)
{
	HRESULT hr =  m_ipObj ? S_OK : ADS_E_NOINTERFACE;
	PVOID pparam = &eParam;
	ULONG nparam = sizeof(eParam);
	if (SUCCEEDED(hr))
	{
		hr =  m_ipObj->TcGetObjPara(0x00000001,nparam,pparam);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcGetObjPara of eTraceLevelMax (TcTraceLevel) with PID 0x00000001 failed: hr = 0x%08X",hr);
	}
	return hr;

}

void CFbTcComExceptionGenerator::_GeteTraceLevelMax(ST_GetSet_TcTraceLevel* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->GeteTraceLevelMax( ST_Param->eParam );
}

HRESULT CFbTcComExceptionGenerator::SeteTraceLevelMax(TcTraceLevel eParam)
{
	HRESULT hr =  m_ipObj ? S_OK : ADS_E_NOINTERFACE;
	if (SUCCEEDED(hr))
	{
		hr = m_ipObj->TcSetObjPara(0x00000001,sizeof(eParam),&eParam);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcSetObjPara of eTraceLevelMax (TcTraceLevel) with PID 0x00000001 failed: hr = 0x%08X",hr);
	}
	return hr;

}

void CFbTcComExceptionGenerator::_SeteTraceLevelMax(ST_GetSet_TcTraceLevel* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->SeteTraceLevelMax( ST_Param->eParam );
}

HRESULT CFbTcComExceptionGenerator::GeteModuleCaller(TcMgSdk::ModuleCaller& eParam)
{
	HRESULT hr =  m_ipObj ? S_OK : ADS_E_NOINTERFACE;
	PVOID pparam = &eParam;
	ULONG nparam = sizeof(eParam);
	if (SUCCEEDED(hr))
	{
		hr =  m_ipObj->TcGetObjPara(0x00000002,nparam,pparam);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcGetObjPara of eModuleCaller (TcMgSdk::ModuleCaller) with PID 0x00000002 failed: hr = 0x%08X",hr);
	}
	return hr;

}

void CFbTcComExceptionGenerator::_GeteModuleCaller(ST_GetSet_E_ModuleCaller* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->GeteModuleCaller( ST_Param->eParam );
}

HRESULT CFbTcComExceptionGenerator::SeteModuleCaller(TcMgSdk::ModuleCaller eParam)
{
	HRESULT hr =  m_ipObj ? S_OK : ADS_E_NOINTERFACE;
	if (SUCCEEDED(hr))
	{
		hr = m_ipObj->TcSetObjPara(0x00000002,sizeof(eParam),&eParam);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcSetObjPara of eModuleCaller (TcMgSdk::ModuleCaller) with PID 0x00000002 failed: hr = 0x%08X",hr);
	}
	return hr;

}

void CFbTcComExceptionGenerator::_SeteModuleCaller(ST_GetSet_E_ModuleCaller* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->SeteModuleCaller( ST_Param->eParam );
}

HRESULT CFbTcComExceptionGenerator::GeteCallerVerification(TcMgSdk::CallerVerification& eParam)
{
	HRESULT hr =  m_ipObj ? S_OK : ADS_E_NOINTERFACE;
	PVOID pparam = &eParam;
	ULONG nparam = sizeof(eParam);
	if (SUCCEEDED(hr))
	{
		hr =  m_ipObj->TcGetObjPara(0x00000003,nparam,pparam);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcGetObjPara of eCallerVerification (TcMgSdk::CallerVerification) with PID 0x00000003 failed: hr = 0x%08X",hr);
	}
	return hr;

}

void CFbTcComExceptionGenerator::_GeteCallerVerification(ST_GetSet_E_CallerVerification* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->GeteCallerVerification( ST_Param->eParam );
}

HRESULT CFbTcComExceptionGenerator::SeteCallerVerification(TcMgSdk::CallerVerification eParam)
{
	HRESULT hr =  m_ipObj ? S_OK : ADS_E_NOINTERFACE;
	if (SUCCEEDED(hr))
	{
		hr = m_ipObj->TcSetObjPara(0x00000003,sizeof(eParam),&eParam);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcSetObjPara of eCallerVerification (TcMgSdk::CallerVerification) with PID 0x00000003 failed: hr = 0x%08X",hr);
	}
	return hr;

}

void CFbTcComExceptionGenerator::_SeteCallerVerification(ST_GetSet_E_CallerVerification* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->SeteCallerVerification( ST_Param->eParam );
}

HRESULT CFbTcComExceptionGenerator::GeteStepSizeAdaptation(TcMgSdk::StepSizeAdaptation& eParam)
{
	HRESULT hr =  m_ipObj ? S_OK : ADS_E_NOINTERFACE;
	PVOID pparam = &eParam;
	ULONG nparam = sizeof(eParam);
	if (SUCCEEDED(hr))
	{
		hr =  m_ipObj->TcGetObjPara(0x00000004,nparam,pparam);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcGetObjPara of eStepSizeAdaptation (TcMgSdk::StepSizeAdaptation) with PID 0x00000004 failed: hr = 0x%08X",hr);
	}
	return hr;

}

void CFbTcComExceptionGenerator::_GeteStepSizeAdaptation(ST_GetSet_E_StepSizeAdaptation* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->GeteStepSizeAdaptation( ST_Param->eParam );
}

HRESULT CFbTcComExceptionGenerator::SeteStepSizeAdaptation(TcMgSdk::StepSizeAdaptation eParam)
{
	HRESULT hr =  m_ipObj ? S_OK : ADS_E_NOINTERFACE;
	if (SUCCEEDED(hr))
	{
		hr = m_ipObj->TcSetObjPara(0x00000004,sizeof(eParam),&eParam);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcSetObjPara of eStepSizeAdaptation (TcMgSdk::StepSizeAdaptation) with PID 0x00000004 failed: hr = 0x%08X",hr);
	}
	return hr;

}

void CFbTcComExceptionGenerator::_SeteStepSizeAdaptation(ST_GetSet_E_StepSizeAdaptation* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->SeteStepSizeAdaptation( ST_Param->eParam );
}

HRESULT CFbTcComExceptionGenerator::GeteExecutionSequence(TcMgSdk::ExecutionSequence1& eParam)
{
	HRESULT hr =  m_ipObj ? S_OK : ADS_E_NOINTERFACE;
	PVOID pparam = &eParam;
	ULONG nparam = sizeof(eParam);
	if (SUCCEEDED(hr))
	{
		hr =  m_ipObj->TcGetObjPara(0x00000005,nparam,pparam);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcGetObjPara of eExecutionSequence (TcMgSdk::ExecutionSequence1) with PID 0x00000005 failed: hr = 0x%08X",hr);
	}
	return hr;

}

void CFbTcComExceptionGenerator::_GeteExecutionSequence(ST_GetSet_E_ExecutionSequence1* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->GeteExecutionSequence( ST_Param->eParam );
}

HRESULT CFbTcComExceptionGenerator::SeteExecutionSequence(TcMgSdk::ExecutionSequence1 eParam)
{
	HRESULT hr =  m_ipObj ? S_OK : ADS_E_NOINTERFACE;
	if (SUCCEEDED(hr))
	{
		hr = m_ipObj->TcSetObjPara(0x00000005,sizeof(eParam),&eParam);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcSetObjPara of eExecutionSequence (TcMgSdk::ExecutionSequence1) with PID 0x00000005 failed: hr = 0x%08X",hr);
	}
	return hr;

}

void CFbTcComExceptionGenerator::_SeteExecutionSequence(ST_GetSet_E_ExecutionSequence1* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->SeteExecutionSequence( ST_Param->eParam );
}

HRESULT CFbTcComExceptionGenerator::GetbExecute(bool& bParam)
{
	HRESULT hr =  m_ipObj ? S_OK : ADS_E_NOINTERFACE;
	PVOID pparam = &bParam;
	ULONG nparam = sizeof(bParam);
	if (SUCCEEDED(hr))
	{
		hr =  m_ipObj->TcGetObjPara(0x00000006,nparam,pparam);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcGetObjPara of bExecute (bool) with PID 0x00000006 failed: hr = 0x%08X",hr);
	}
	return hr;

}

void CFbTcComExceptionGenerator::_GetbExecute(ST_GetSet_BOOL* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->GetbExecute( ST_Param->bParam );
}

HRESULT CFbTcComExceptionGenerator::SetbExecute(bool bParam)
{
	HRESULT hr =  m_ipObj ? S_OK : ADS_E_NOINTERFACE;
	if (SUCCEEDED(hr))
	{
		hr = m_ipObj->TcSetObjPara(0x00000006,sizeof(bParam),&bParam);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcSetObjPara of bExecute (bool) with PID 0x00000006 failed: hr = 0x%08X",hr);
	}
	return hr;

}

void CFbTcComExceptionGenerator::_SetbExecute(ST_GetSet_BOOL* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->SetbExecute( ST_Param->bParam );
}

HRESULT CFbTcComExceptionGenerator::GeteAccessLockState(TCOM_STATE& eParam)
{
	HRESULT hr =  m_ipObj ? S_OK : ADS_E_NOINTERFACE;
	PVOID pparam = &eParam;
	ULONG nparam = sizeof(eParam);
	if (SUCCEEDED(hr))
	{
		hr =  m_ipObj->TcGetObjPara(0x00000007,nparam,pparam);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcGetObjPara of eAccessLockState (TCOM_STATE) with PID 0x00000007 failed: hr = 0x%08X",hr);
	}
	return hr;

}

void CFbTcComExceptionGenerator::_GeteAccessLockState(ST_GetSet_TCOM_STATE* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->GeteAccessLockState( ST_Param->eParam );
}

HRESULT CFbTcComExceptionGenerator::SeteAccessLockState(TCOM_STATE eParam)
{
	HRESULT hr =  m_ipObj ? S_OK : ADS_E_NOINTERFACE;
	if (SUCCEEDED(hr))
	{
		hr = m_ipObj->TcSetObjPara(0x00000007,sizeof(eParam),&eParam);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcSetObjPara of eAccessLockState (TCOM_STATE) with PID 0x00000007 failed: hr = 0x%08X",hr);
	}
	return hr;

}

void CFbTcComExceptionGenerator::_SeteAccessLockState(ST_GetSet_TCOM_STATE* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->SeteAccessLockState( ST_Param->eParam );
}

HRESULT CFbTcComExceptionGenerator::GeteInitExceptionHandling(TcMgSdk::FpExcptCtrlSet& eParam)
{
	HRESULT hr =  m_ipObj ? S_OK : ADS_E_NOINTERFACE;
	PVOID pparam = &eParam;
	ULONG nparam = sizeof(eParam);
	if (SUCCEEDED(hr))
	{
		hr =  m_ipObj->TcGetObjPara(0x00000008,nparam,pparam);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcGetObjPara of eInitExceptionHandling (TcMgSdk::FpExcptCtrlSet) with PID 0x00000008 failed: hr = 0x%08X",hr);
	}
	return hr;

}

void CFbTcComExceptionGenerator::_GeteInitExceptionHandling(ST_GetSet_E_FpExcptCtrlSet* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->GeteInitExceptionHandling( ST_Param->eParam );
}

HRESULT CFbTcComExceptionGenerator::SeteInitExceptionHandling(TcMgSdk::FpExcptCtrlSet eParam)
{
	HRESULT hr =  m_ipObj ? S_OK : ADS_E_NOINTERFACE;
	if (SUCCEEDED(hr))
	{
		hr = m_ipObj->TcSetObjPara(0x00000008,sizeof(eParam),&eParam);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcSetObjPara of eInitExceptionHandling (TcMgSdk::FpExcptCtrlSet) with PID 0x00000008 failed: hr = 0x%08X",hr);
	}
	return hr;

}

void CFbTcComExceptionGenerator::_SeteInitExceptionHandling(ST_GetSet_E_FpExcptCtrlSet* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->SeteInitExceptionHandling( ST_Param->eParam );
}

HRESULT CFbTcComExceptionGenerator::GeteUpdateExceptionHandling(TcMgSdk::FpExcptCtrlSet& eParam)
{
	HRESULT hr =  m_ipObj ? S_OK : ADS_E_NOINTERFACE;
	PVOID pparam = &eParam;
	ULONG nparam = sizeof(eParam);
	if (SUCCEEDED(hr))
	{
		hr =  m_ipObj->TcGetObjPara(0x00000009,nparam,pparam);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcGetObjPara of eUpdateExceptionHandling (TcMgSdk::FpExcptCtrlSet) with PID 0x00000009 failed: hr = 0x%08X",hr);
	}
	return hr;

}

void CFbTcComExceptionGenerator::_GeteUpdateExceptionHandling(ST_GetSet_E_FpExcptCtrlSetEx* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->GeteUpdateExceptionHandling( ST_Param->eParam );
}

HRESULT CFbTcComExceptionGenerator::SeteUpdateExceptionHandling(TcMgSdk::FpExcptCtrlSet eParam)
{
	HRESULT hr =  m_ipObj ? S_OK : ADS_E_NOINTERFACE;
	if (SUCCEEDED(hr))
	{
		hr = m_ipObj->TcSetObjPara(0x00000009,sizeof(eParam),&eParam);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcSetObjPara of eUpdateExceptionHandling (TcMgSdk::FpExcptCtrlSet) with PID 0x00000009 failed: hr = 0x%08X",hr);
	}
	return hr;

}

void CFbTcComExceptionGenerator::_SeteUpdateExceptionHandling(ST_GetSet_E_FpExcptCtrlSetEx* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->SeteUpdateExceptionHandling( ST_Param->eParam );
}

HRESULT CFbTcComExceptionGenerator::GetstModuleBuildInfo(TcMgSdk::ModuleBuildInfo& stParam)
{
	HRESULT hr =  m_ipObj ? S_OK : ADS_E_NOINTERFACE;
	PVOID pparam = &stParam;
	ULONG nparam = sizeof(stParam);
	if (SUCCEEDED(hr))
	{
		hr =  m_ipObj->TcGetObjPara(0x0000000A,nparam,pparam);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcGetObjPara of stModuleBuildInfo (TcMgSdk::ModuleBuildInfo) with PID 0x0000000A failed: hr = 0x%08X",hr);
	}
	return hr;

}

void CFbTcComExceptionGenerator::_GetstModuleBuildInfo(ST_GetSet_ST_ModuleBuildInfo* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->GetstModuleBuildInfo( ST_Param->stParam );
}

HRESULT CFbTcComExceptionGenerator::GetbInitialized(bool& bParam)
{
	HRESULT hr =  m_ipObj ? S_OK : ADS_E_NOINTERFACE;
	PVOID pparam = &bParam;
	ULONG nparam = sizeof(bParam);
	if (SUCCEEDED(hr))
	{
		hr =  m_ipObj->TcGetObjPara(0x0000000B,nparam,pparam);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcGetObjPara of bInitialized (bool) with PID 0x0000000B failed: hr = 0x%08X",hr);
	}
	return hr;

}

void CFbTcComExceptionGenerator::_GetbInitialized(ST_GetSet_BOOL* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->GetbInitialized( ST_Param->bParam );
}

HRESULT CFbTcComExceptionGenerator::GetnSkippedExecutionCount(ULONG& nParam)
{
	HRESULT hr =  m_ipObj ? S_OK : ADS_E_NOINTERFACE;
	PVOID pparam = &nParam;
	ULONG nparam = sizeof(nParam);
	if (SUCCEEDED(hr))
	{
		hr =  m_ipObj->TcGetObjPara(0x0000000C,nparam,pparam);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcGetObjPara of nSkippedExecutionCount (ULONG) with PID 0x0000000C failed: hr = 0x%08X",hr);
	}
	return hr;

}

void CFbTcComExceptionGenerator::_GetnSkippedExecutionCount(ST_GetSet_UDINT* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->GetnSkippedExecutionCount( ST_Param->nParam );
}

HRESULT CFbTcComExceptionGenerator::GetstLibraryInfo(TcMgSdk::LibraryInfo& stParam)
{
	HRESULT hr =  m_ipObj ? S_OK : ADS_E_NOINTERFACE;
	PVOID pparam = &stParam;
	ULONG nparam = sizeof(stParam);
	if (SUCCEEDED(hr))
	{
		hr =  m_ipObj->TcGetObjPara(0x0000000D,nparam,pparam);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcGetObjPara of stLibraryInfo (TcMgSdk::LibraryInfo) with PID 0x0000000D failed: hr = 0x%08X",hr);
	}
	return hr;

}

void CFbTcComExceptionGenerator::_GetstLibraryInfo(ST_GetSet_ST_LibraryInfo* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->GetstLibraryInfo( ST_Param->stParam );
}

HRESULT CFbTcComExceptionGenerator::GetstModuleInfo(TcMgSdk::ModuleInfo& stParam)
{
	HRESULT hr =  m_ipObj ? S_OK : ADS_E_NOINTERFACE;
	PVOID pparam = &stParam;
	ULONG nparam = sizeof(stParam);
	if (SUCCEEDED(hr))
	{
		hr =  m_ipObj->TcGetObjPara(0x0000000E,nparam,pparam);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcGetObjPara of stModuleInfo (TcMgSdk::ModuleInfo) with PID 0x0000000E failed: hr = 0x%08X",hr);
	}
	return hr;

}

void CFbTcComExceptionGenerator::_GetstModuleInfo(ST_GetSet_ST_ModuleInfo* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->GetstModuleInfo( ST_Param->stParam );
}

HRESULT CFbTcComExceptionGenerator::GetstModuleGeneratorInfo(TcMatSim_ModuleGeneratorInfo& stParam)
{
	HRESULT hr =  m_ipObj ? S_OK : ADS_E_NOINTERFACE;
	PVOID pparam = &stParam;
	ULONG nparam = sizeof(stParam);
	if (SUCCEEDED(hr))
	{
		hr =  m_ipObj->TcGetObjPara(0x0000000F,nparam,pparam);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcGetObjPara of stModuleGeneratorInfo (TcMatSim_ModuleGeneratorInfo) with PID 0x0000000F failed: hr = 0x%08X",hr);
	}
	return hr;

}

void CFbTcComExceptionGenerator::_GetstModuleGeneratorInfo(ST_GetSet_ST_TcMatSim_ModuleGeneratorInfo* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->GetstModuleGeneratorInfo( ST_Param->stParam );
}

HRESULT CFbTcComExceptionGenerator::SetstModuleGeneratorInfo(TcMatSim_ModuleGeneratorInfo& stParam)
{
	HRESULT hr =  m_ipObj ? S_OK : ADS_E_NOINTERFACE;
	if (SUCCEEDED(hr))
	{
		hr = m_ipObj->TcSetObjPara(0x0000000F,sizeof(stParam),&stParam);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcSetObjPara of stModuleGeneratorInfo (TcMatSim_ModuleGeneratorInfo) with PID 0x0000000F failed: hr = 0x%08X",hr);
	}
	return hr;

}

void CFbTcComExceptionGenerator::_SetstModuleGeneratorInfo(ST_GetSet_ST_TcMatSim_ModuleGeneratorInfo* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->SetstModuleGeneratorInfo( ST_Param->stParam );
}

HRESULT CFbTcComExceptionGenerator::GetstSimulinkModelInfo(TcMatSim_SimulinkModelInfo& stParam)
{
	HRESULT hr =  m_ipObj ? S_OK : ADS_E_NOINTERFACE;
	PVOID pparam = &stParam;
	ULONG nparam = sizeof(stParam);
	if (SUCCEEDED(hr))
	{
		hr =  m_ipObj->TcGetObjPara(0x00000010,nparam,pparam);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcGetObjPara of stSimulinkModelInfo (TcMatSim_SimulinkModelInfo) with PID 0x00000010 failed: hr = 0x%08X",hr);
	}
	return hr;

}

void CFbTcComExceptionGenerator::_GetstSimulinkModelInfo(ST_GetSet_ST_TcMatSim_SimulinkModelInfo* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->GetstSimulinkModelInfo( ST_Param->stParam );
}

HRESULT CFbTcComExceptionGenerator::SetstSimulinkModelInfo(TcMatSim_SimulinkModelInfo& stParam)
{
	HRESULT hr =  m_ipObj ? S_OK : ADS_E_NOINTERFACE;
	if (SUCCEEDED(hr))
	{
		hr = m_ipObj->TcSetObjPara(0x00000010,sizeof(stParam),&stParam);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcSetObjPara of stSimulinkModelInfo (TcMatSim_SimulinkModelInfo) with PID 0x00000010 failed: hr = 0x%08X",hr);
	}
	return hr;

}

void CFbTcComExceptionGenerator::_SetstSimulinkModelInfo(ST_GetSet_ST_TcMatSim_SimulinkModelInfo* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->SetstSimulinkModelInfo( ST_Param->stParam );
}

HRESULT CFbTcComExceptionGenerator::GetnCycleCount(ULONGLONG& nParam)
{
	HRESULT hr =  m_ipObj ? S_OK : ADS_E_NOINTERFACE;
	PVOID pparam = &nParam;
	ULONG nparam = sizeof(nParam);
	if (SUCCEEDED(hr))
	{
		hr =  m_ipObj->TcGetObjPara(0x00000011,nparam,pparam);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcGetObjPara of nCycleCount (ULONGLONG) with PID 0x00000011 failed: hr = 0x%08X",hr);
	}
	return hr;

}

void CFbTcComExceptionGenerator::_GetnCycleCount(ST_GetSet_ULINT* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->GetnCycleCount( ST_Param->nParam );
}

HRESULT CFbTcComExceptionGenerator::GetnExceptionCount(ULONGLONG& nParam)
{
	HRESULT hr =  m_ipObj ? S_OK : ADS_E_NOINTERFACE;
	PVOID pparam = &nParam;
	ULONG nparam = sizeof(nParam);
	if (SUCCEEDED(hr))
	{
		hr =  m_ipObj->TcGetObjPara(0x00000012,nparam,pparam);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcGetObjPara of nExceptionCount (ULONGLONG) with PID 0x00000012 failed: hr = 0x%08X",hr);
	}
	return hr;

}

void CFbTcComExceptionGenerator::_GetnExceptionCount(ST_GetSet_ULINT* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->GetnExceptionCount( ST_Param->nParam );
}

HRESULT CFbTcComExceptionGenerator::GetstExceptionInfo(TcMgSdk::ExceptionInfo& stParam)
{
	HRESULT hr =  m_ipObj ? S_OK : ADS_E_NOINTERFACE;
	PVOID pparam = &stParam;
	ULONG nparam = sizeof(stParam);
	if (SUCCEEDED(hr))
	{
		hr =  m_ipObj->TcGetObjPara(0x00000013,nparam,pparam);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "TcGetObjPara of stExceptionInfo (TcMgSdk::ExceptionInfo) with PID 0x00000013 failed: hr = 0x%08X",hr);
	}
	return hr;

}

void CFbTcComExceptionGenerator::_GetstExceptionInfo(ST_GetSet_ST_ExceptionInfo* ST_Param)
{
	((CFbTcComExceptionGenerator*)ST_Param->pInst)->GetstExceptionInfo( ST_Param->stParam );
}



BEGIN_FUNC_MAP_FB(CFbTcComExceptionGenerator)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "FB_INIT", "FB_ExceptionGenerator_TcCOM_InitStruct" "__FB_init", CFbTcComExceptionGenerator::_FB_init)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "FB_AFTERINIT", "FB_ExceptionGenerator_TcCOM_InitStruct" "__FB_afterinit", CFbTcComExceptionGenerator::_FB_AfterInit)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "REINIT", "FB_ExceptionGenerator_TcCOM_InitStruct" "__Reinit", CFbTcComExceptionGenerator::_Reinit)
	FUNC_ENTRY_LIB(VID_ExceptionGenerator, CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "FB_ExceptionGenerator_TcCOM_InitStruct" "__main", CFbTcComExceptionGenerator::_FB_Main)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "FB_EXIT", "FB_ExceptionGenerator_TcCOM_InitStruct" "__FB_exit", CFbTcComExceptionGenerator::_FB_exit)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "GETEOBJECTSTATE", "FB_ExceptionGenerator_TcCOM_InitStruct" "__GeteObjectState", CFbTcComExceptionGenerator::_GeteObjectState)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "SETEOBJECTSTATE", "FB_ExceptionGenerator_TcCOM_InitStruct" "__SeteObjectState", CFbTcComExceptionGenerator::_SeteObjectState)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "GETNHRESULT", "FB_ExceptionGenerator_TcCOM_InitStruct" "__GetnHResult", CFbTcComExceptionGenerator::_GetnHResult)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "GETIPTCCOMOBJECT", "FB_ExceptionGenerator_TcCOM_InitStruct" "__GetipTcComObject", CFbTcComExceptionGenerator::_GetipTcComObject)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "GETIPADI", "FB_ExceptionGenerator_TcCOM_InitStruct" "__GetipADI", CFbTcComExceptionGenerator::_GetipADI)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "GETNTASKOID", "FB_ExceptionGenerator_TcCOM_InitStruct" "__GetnTaskOid", CFbTcComExceptionGenerator::_GetnTaskOid)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "SETNTASKOID", "FB_ExceptionGenerator_TcCOM_InitStruct" "__SetnTaskOid", CFbTcComExceptionGenerator::_SetnTaskOid)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "GETNTASKPRIORITY", "FB_ExceptionGenerator_TcCOM_InitStruct" "__GetnTaskPriority", CFbTcComExceptionGenerator::_GetnTaskPriority)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "GETNTASKCYCLETIMENS", "FB_ExceptionGenerator_TcCOM_InitStruct" "__GetnTaskCycleTimeNs", CFbTcComExceptionGenerator::_GetnTaskCycleTimeNs)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "GETNTASKPORT", "FB_ExceptionGenerator_TcCOM_InitStruct" "__GetnTaskPort", CFbTcComExceptionGenerator::_GetnTaskPort)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "GETNTASKSORTORDER", "FB_ExceptionGenerator_TcCOM_InitStruct" "__GetnTaskSortOrder", CFbTcComExceptionGenerator::_GetnTaskSortOrder)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "SETNTASKSORTORDER", "FB_ExceptionGenerator_TcCOM_InitStruct" "__SetnTaskSortOrder", CFbTcComExceptionGenerator::_SetnTaskSortOrder)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "GETETRACELEVELMAX", "FB_ExceptionGenerator_TcCOM_InitStruct" "__GeteTraceLevelMax", CFbTcComExceptionGenerator::_GeteTraceLevelMax)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "SETETRACELEVELMAX", "FB_ExceptionGenerator_TcCOM_InitStruct" "__SeteTraceLevelMax", CFbTcComExceptionGenerator::_SeteTraceLevelMax)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "GETEMODULECALLER", "FB_ExceptionGenerator_TcCOM_InitStruct" "__GeteModuleCaller", CFbTcComExceptionGenerator::_GeteModuleCaller)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "SETEMODULECALLER", "FB_ExceptionGenerator_TcCOM_InitStruct" "__SeteModuleCaller", CFbTcComExceptionGenerator::_SeteModuleCaller)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "GETECALLERVERIFICATION", "FB_ExceptionGenerator_TcCOM_InitStruct" "__GeteCallerVerification", CFbTcComExceptionGenerator::_GeteCallerVerification)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "SETECALLERVERIFICATION", "FB_ExceptionGenerator_TcCOM_InitStruct" "__SeteCallerVerification", CFbTcComExceptionGenerator::_SeteCallerVerification)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "GETESTEPSIZEADAPTATION", "FB_ExceptionGenerator_TcCOM_InitStruct" "__GeteStepSizeAdaptation", CFbTcComExceptionGenerator::_GeteStepSizeAdaptation)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "SETESTEPSIZEADAPTATION", "FB_ExceptionGenerator_TcCOM_InitStruct" "__SeteStepSizeAdaptation", CFbTcComExceptionGenerator::_SeteStepSizeAdaptation)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "GETEEXECUTIONSEQUENCE", "FB_ExceptionGenerator_TcCOM_InitStruct" "__GeteExecutionSequence", CFbTcComExceptionGenerator::_GeteExecutionSequence)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "SETEEXECUTIONSEQUENCE", "FB_ExceptionGenerator_TcCOM_InitStruct" "__SeteExecutionSequence", CFbTcComExceptionGenerator::_SeteExecutionSequence)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "GETBEXECUTE", "FB_ExceptionGenerator_TcCOM_InitStruct" "__GetbExecute", CFbTcComExceptionGenerator::_GetbExecute)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "SETBEXECUTE", "FB_ExceptionGenerator_TcCOM_InitStruct" "__SetbExecute", CFbTcComExceptionGenerator::_SetbExecute)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "GETEACCESSLOCKSTATE", "FB_ExceptionGenerator_TcCOM_InitStruct" "__GeteAccessLockState", CFbTcComExceptionGenerator::_GeteAccessLockState)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "SETEACCESSLOCKSTATE", "FB_ExceptionGenerator_TcCOM_InitStruct" "__SeteAccessLockState", CFbTcComExceptionGenerator::_SeteAccessLockState)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "GETEINITEXCEPTIONHANDLING", "FB_ExceptionGenerator_TcCOM_InitStruct" "__GeteInitExceptionHandling", CFbTcComExceptionGenerator::_GeteInitExceptionHandling)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "SETEINITEXCEPTIONHANDLING", "FB_ExceptionGenerator_TcCOM_InitStruct" "__SeteInitExceptionHandling", CFbTcComExceptionGenerator::_SeteInitExceptionHandling)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "GETEUPDATEEXCEPTIONHANDLING", "FB_ExceptionGenerator_TcCOM_InitStruct" "__GeteUpdateExceptionHandling", CFbTcComExceptionGenerator::_GeteUpdateExceptionHandling)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "SETEUPDATEEXCEPTIONHANDLING", "FB_ExceptionGenerator_TcCOM_InitStruct" "__SeteUpdateExceptionHandling", CFbTcComExceptionGenerator::_SeteUpdateExceptionHandling)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "GETSTMODULEBUILDINFO", "FB_ExceptionGenerator_TcCOM_InitStruct" "__GetstModuleBuildInfo", CFbTcComExceptionGenerator::_GetstModuleBuildInfo)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "GETBINITIALIZED", "FB_ExceptionGenerator_TcCOM_InitStruct" "__GetbInitialized", CFbTcComExceptionGenerator::_GetbInitialized)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "GETNSKIPPEDEXECUTIONCOUNT", "FB_ExceptionGenerator_TcCOM_InitStruct" "__GetnSkippedExecutionCount", CFbTcComExceptionGenerator::_GetnSkippedExecutionCount)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "GETSTLIBRARYINFO", "FB_ExceptionGenerator_TcCOM_InitStruct" "__GetstLibraryInfo", CFbTcComExceptionGenerator::_GetstLibraryInfo)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "GETSTMODULEINFO", "FB_ExceptionGenerator_TcCOM_InitStruct" "__GetstModuleInfo", CFbTcComExceptionGenerator::_GetstModuleInfo)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "GETSTMODULEGENERATORINFO", "FB_ExceptionGenerator_TcCOM_InitStruct" "__GetstModuleGeneratorInfo", CFbTcComExceptionGenerator::_GetstModuleGeneratorInfo)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "SETSTMODULEGENERATORINFO", "FB_ExceptionGenerator_TcCOM_InitStruct" "__SetstModuleGeneratorInfo", CFbTcComExceptionGenerator::_SetstModuleGeneratorInfo)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "GETSTSIMULINKMODELINFO", "FB_ExceptionGenerator_TcCOM_InitStruct" "__GetstSimulinkModelInfo", CFbTcComExceptionGenerator::_GetstSimulinkModelInfo)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "SETSTSIMULINKMODELINFO", "FB_ExceptionGenerator_TcCOM_InitStruct" "__SetstSimulinkModelInfo", CFbTcComExceptionGenerator::_SetstSimulinkModelInfo)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "GETNCYCLECOUNT", "FB_ExceptionGenerator_TcCOM_InitStruct" "__GetnCycleCount", CFbTcComExceptionGenerator::_GetnCycleCount)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "GETNEXCEPTIONCOUNT", "FB_ExceptionGenerator_TcCOM_InitStruct" "__GetnExceptionCount", CFbTcComExceptionGenerator::_GetnExceptionCount)
	FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR_TCCOM_INITSTRUCT , "GETSTEXCEPTIONINFO", "FB_ExceptionGenerator_TcCOM_InitStruct" "__GetstExceptionInfo", CFbTcComExceptionGenerator::_GetstExceptionInfo)
END_FUNC_MAP_FB()

DECLARE_FUNCMAP_CREATOR(HandleFuncMap_CFbTcComExceptionGenerator)
{
	return CFbTcComExceptionGenerator::TcHandleFuncMap(mode, idx, idxcounter, pFncId, pipFnc, ppMethod, ppName, pSignature, pVersion);
}
