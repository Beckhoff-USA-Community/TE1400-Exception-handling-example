
// ****************** FbExceptionGenerator.cpp *************************
// Generated by TE140x-TargetForMatlabSimulink  2.3.1.1
// MATLAB 9.10.0.1710957 (R2021a) Update 4 (win64)
// TwinCAT 3.1.4024.0
// TwinCAT Target 2.3.1.1
// Beckhoff Automation GmbH & Co. KG     (www.beckhoff.com)
// *************************************************************

#include "TcPch.h"
#pragma hdrstop

#include "FbExceptionGenerator.h"


#include "ObjClassFactory.h"
using namespace TcMgSdk;

///////////////////////////////////////////////////////////////////////////////
// Definitions
///////////////////////////////////////////////////////////////////////////////
#ifdef _DEBUG
#define new DEBUG_NEW
#endif
#if TC_BUILD<=4024
DEFINE_THIS_FILE()
#endif

///////////////////////////////////////////////////////////////////////////////
// CFbExceptionGenerator specific globals
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// CFbExceptionGenerator static members
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// CFbExceptionGenerator implementation
///////////////////////////////////////////////////////////////////////////////
CFbExceptionGenerator::CFbExceptionGenerator()
{
	GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Init) = FpExcptCtrlSet::Prec53_LogCatchAndDump;
	GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Update) = FpExcptCtrlSet::Prec53_LogCatchAndDump;


	
}

CFbExceptionGenerator::~CFbExceptionGenerator()
{

}

bool CFbExceptionGenerator::FB_Main()
{

	bool fbMainResult = true;

	

	auto fpState = FpControl(FpCtrlSection::Update);
	((ExceptionGeneratorModelClass*)ExceptionGenerator_Obj)->ExceptionGenerator_U.DivByZero = DivByZero;
	((ExceptionGeneratorModelClass*)ExceptionGenerator_Obj)->ExceptionGenerator_U.FloatingPoint = FloatingPoint;
	((ExceptionGeneratorModelClass*)ExceptionGenerator_Obj)->step();
	Result = ((ExceptionGeneratorModelClass*)ExceptionGenerator_Obj)->ExceptionGenerator_Y.Result;
	Counter = ((ExceptionGeneratorModelClass*)ExceptionGenerator_Obj)->ExceptionGenerator_Y.Counter;

	FpRestore(fpState);


	return fbMainResult;
}

void CFbExceptionGenerator::_FB_Main(ST_FB_Main_FB_ExceptionGenerator* ST_Param)
{
	ST_Param->result = ((CFbExceptionGenerator*)ST_Param->pInst)->FB_Main(  );
}

bool CFbExceptionGenerator::FB_exit(bool bInCopyCode)
{

	bool fbExitResult = true;

	auto fpState = FpControl(FpCtrlSection::Init);
	((ExceptionGeneratorModelClass*)ExceptionGenerator_Obj)->terminate();

	FpRestore(fpState);


	SingleInstanceRelease();
	__super::Exit(bInCopyCode);

	return fbExitResult;
}

void CFbExceptionGenerator::_FB_exit(ST_FB_exit_FB_ExceptionGenerator* ST_Param)
{
	ST_Param->result = ((CFbExceptionGenerator*)ST_Param->pInst)->FB_exit( ST_Param->bInCopyCode );
}

bool CFbExceptionGenerator::FB_init(bool bInitRetains, bool bInCopyCode)
{

	bool fbInitResult = true;

	if(fbInitResult)
	{
		ExceptionGenerator_Obj = new ExceptionGeneratorModelClass();

		m_pData = nullptr;
		fbInitResult = __super::Init(0,TC_BUILD_MIN,bInitRetains,bInCopyCode);
		if (!fbInitResult)
		{
			error("__super::Init() did not succeed");
		}
	GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Init) = FpExcptCtrlSet::Prec53_LogCatchAndDump;
	GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Update) = FpExcptCtrlSet::Prec53_LogCatchAndDump;


	}

	fbInitResult &= SingleInstanceLock(GUID_NULL);
	if(fbInitResult)
	{
		auto fpState = FpControl(FpCtrlSection::Init);
		((ExceptionGeneratorModelClass*)ExceptionGenerator_Obj)->initialize();

		FpRestore(fpState);
	}
	else
	{
		error("SingleInstanceLock() did not succeed");
	}

	return fbInitResult;
}

void CFbExceptionGenerator::_FB_init(ST_FB_init_FB_ExceptionGenerator* ST_Param)
{
	ST_Param->result = ((CFbExceptionGenerator*)ST_Param->pInst)->FB_init( ST_Param->bInitRetains, ST_Param->bInCopyCode );
}




BEGIN_FUNC_MAP_FB(CFbExceptionGenerator)
	FUNC_ENTRY_LIB(VID_ExceptionGenerator, CID_FB_EXCEPTIONGENERATOR , "FB_ExceptionGenerator" "__main", CFbExceptionGenerator::_FB_Main)
FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR , "FB_EXIT", "FB_ExceptionGenerator" "__FB_exit", CFbExceptionGenerator::_FB_exit)
FUNC_METHOD_ENTRY_LIB(VID_ExceptionGenerator,CID_FB_EXCEPTIONGENERATOR , "FB_INIT", "FB_ExceptionGenerator" "__FB_init", CFbExceptionGenerator::_FB_init)

END_FUNC_MAP_FB()

DECLARE_FUNCMAP_CREATOR(HandleFuncMap_CFbExceptionGenerator)
{
	return CFbExceptionGenerator::TcHandleFuncMap(mode, idx, idxcounter, pFncId, pipFnc, ppMethod, ppName, pSignature, pVersion);
}
