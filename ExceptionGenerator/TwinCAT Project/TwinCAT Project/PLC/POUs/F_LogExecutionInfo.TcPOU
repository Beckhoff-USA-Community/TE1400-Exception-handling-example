<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="F_LogExecutionInfo" Id="{7fd1fde0-f52a-4d7e-8cab-eaf20793d487}" SpecialFunc="None">
    <Declaration><![CDATA[//https://infosys.beckhoff.com/content/1033/te1400_tc3_target_matlab/11335410315.html?id=3885529162355206359
FUNCTION F_LogExecutionInfo : HRESULT
VAR_INPUT
	ExecutionInfo 				:ST_ExecutionInfo;
	ModuleBuildInfo 			:ST_ModuleBuildInfo;	
END_VAR
VAR	
	sFormatString				:STRING(255);
	sOutputString				:STRING(255);
	fbFormat					:FB_FormatString2;
 	sOut       					:T_MaxString;	
    bError     					:BOOL;
    nErrID     					:UDINT;	
	icnt						:UDINT;
	
	sExceptionCode				:T_MaxString;
	sTmxName					:T_MaxString;
	sTmxVersion					:T_MaxString;
	sReturnAddr					:T_MaxString;	
	sDumpCreated				:T_MaxString;	
	sBuildInfoTcVersion			:T_MaxString;
	sBuildInfoDebug				:T_MaxString;
	
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[//Exception code
CASE ExecutionInfo.stActException.nExceptionCode OF
	16#C000008E:
		sExceptionCode:='Divide by zero';
	16#C000008F:
		sExceptionCode:='Inexact result';
	16#C0000090:
		sExceptionCode:='Invalid operation';
	ELSE
		sExceptionCode:= TO_STRING(ExecutionInfo.stActException.nExceptionCode);
END_CASE

//Needed a string with lenght of T_MaxString
sTmxName:=ExecutionInfo.stActException.sTmxName;

//Tmx Version
sTmxVersion :=CONCAT(TO_STRING(ExecutionInfo.stActException.nTmxVersion[0]),'.');
sTmxVersion :=CONCAT(sTmxVersion,TO_STRING(ExecutionInfo.stActException.nTmxVersion[1]));
sTmxVersion	:=CONCAT(sTmxVersion,'.');
sTmxVersion :=CONCAT(sTmxVersion,TO_STRING(ExecutionInfo.stActException.nTmxVersion[2]));
sTmxVersion	:=CONCAT(sTmxVersion,'.');
sTmxVersion :=CONCAT(sTmxVersion,TO_STRING(ExecutionInfo.stActException.nTmxVersion[3]));


//Return address
sReturnAddr		:=DATA_TO_HEXSTR(ADR(ExecutionInfo.stActException.nReturnAddr),SIZEOF(ExecutionInfo.stActException.nReturnAddr),FALSE);

//Build info
sBuildInfoTcVersion		:=CONCAT(TO_STRING(ModuleBuildInfo.nTcBuild),'.');
sBuildInfoTcVersion		:=CONCAT(sBuildInfoTcVersion,TO_STRING(ModuleBuildInfo.nTcRevision));
	
IF ModuleBuildInfo.bDebug THEN
	sBuildInfoDebug:='Debug';
ELSE
	sBuildInfoDebug:='Release';
END_IF

IF ExecutionInfo.stActException.bDumpCreated THEN
	sDumpCreated:='TRUE';
ELSE
	sDumpCreated:='FALSE';
END_IF

sFormatString:=	'Exception:%s | %s:%s | Instruction Addr:0x%X | Return Addr:%s | Dump Created:%s | Cycle Count:%d | Exception Count:%d | Build info: %s %s';			 
				 
		fbFormat(
			pFormatString:=ADR(sFormatString) , 
			arg1 := F_STRING( sExceptionCode), 									//Code of the exception.
			arg2 := F_STRING( sTmxName ), 										//Name of the tmx driver that threw the exception.                                    
			arg3 := F_STRING( sTmxVersion),        								//Version of the tmx driver that threw the exception.
			arg4 := F_UDINT	( ExecutionInfo.stActException.nInstructionAddr),	//Relative address in memory; location where the exception occurred.
			arg5 := F_STRING( sReturnAddr),     								//Return addresses
			arg6 := F_STRING( sDumpCreated),		  							//TRUE if a dump file was created for the exception.
			arg7 := F_ULINT	( ExecutionInfo.nCycleCount ),  					//Current cycle count (independent of an exception)         
			arg8 := F_ULINT	( ExecutionInfo.nExceptionCount ),					//Number of exceptions that have occurred so far  
		    arg9 := F_STRING( sBuildInfoTcVersion ),						//Tc Build info Tc version
			arg10 := F_STRING( sBuildInfoDebug ),		    				// Debug or release
			pDstString:=ADR(sOutputString) , 
			nDstSize:=SIZEOF(sOutputString) , 
			bError=>bError , 
			nErrId=>nErrID );
			
	  IF NOT bError THEN
		F_LogExecutionInfo:=ADSLOGSTR( msgCtrlMask := ADSLOG_MSGTYPE_ERROR OR ADSLOG_MSGTYPE_LOG, msgFmtStr := sOutputString, strArg := '');		  
	  ELSE
		F_LogExecutionInfo:=ADSLOGSTR( msgCtrlMask := ADSLOG_MSGTYPE_ERROR OR ADSLOG_MSGTYPE_LOG, msgFmtStr := 'Error %s formating string', strArg :=TO_STRING(nErrID) );
	  END_IF
			

(*
With the InstructionAddr it is possible to judge if the exception with the given ExceptionCode always occurs at the same place in the source code. 
If the InstructionAddr is the same for repeating exceptions, it always occurs at the same point in the code. 
Via ReturnAddr you can see where the calls came from that led to the location of the exception. So you can judge if the call that leads to the exception always takes the same call path. 
If the code is called from outside the Tmx driver, there is a 0 in ReturnAddr.

*)
]]></ST>
    </Implementation>
    <LineIds Name="F_LogExecutionInfo">
      <LineId Id="129" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="139" Count="2" />
      <LineId Id="137" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="102" Count="2" />
      <LineId Id="115" Count="0" />
      <LineId Id="107" Count="3" />
      <LineId Id="112" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="118" Count="1" />
      <LineId Id="113" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="149" Count="0" />
      <LineId Id="155" Count="3" />
      <LineId Id="160" Count="1" />
      <LineId Id="159" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="72" Count="1" />
      <LineId Id="71" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="39" Count="9" />
      <LineId Id="151" Count="1" />
      <LineId Id="51" Count="2" />
      <LineId Id="38" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="62" Count="2" />
      <LineId Id="61" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="81" Count="2" />
      <LineId Id="80" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="100" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>